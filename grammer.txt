Program ->  Declaration_list $
Declaration_list ->  Declaration Declaration_list
Declaration_list ->  ε
Declaration ->  Declaration_initial Declaration_prime #end
Declaration_initial ->  Type_specifier #declare_id #padd ID
Declaration_prime ->  Fun_Declaration_prime
Declaration_prime ->  Var_Declaration_prime
Var_Declaration_prime ->  ;
Var_Declaration_prime -> [ #padd NUM ] #declare_arr ;
Fun_Declaration_prime ->  ( #func_arg_declare_start Params #func_arg_declare_finish ) Compound_stmt #set_return_jump
Type_specifier ->  int
Type_specifier ->  void
Params ->  int #declare_id #padd ID Param_prime #end Param_list
Params ->  void
Param_list ->  , Param Param_list
Param_list -> ε
Param ->  Declaration_initial Param_prime #end
Param_prime ->  [ ]
Param_prime ->  ε
Compound_stmt ->  { Declaration_list Statement_list }
Statement_list ->  Statement Statement_list
Statement_list ->  ε
Statement ->  Expression_stmt
Statement ->  Compound_stmt
Statement ->  Selection_stmt
Statement ->  Iteration_stmt
Statement ->  Return_stmt
Expression_stmt ->  Expression #end ;
Expression_stmt ->  break ;
Expression_stmt ->  ;
Selection_stmt ->  if ( Expression ) #save Statement Else_stmt
Else_stmt ->  #jpf endif
Else_stmt ->  else #jpf_save Statement #jp endif
Iteration_stmt ->  repeat #label Statement until ( Expression ) #until
Return_stmt ->  return Return_stmt_prime
Return_stmt_prime ->  ;
Return_stmt_prime ->  #push_return_value Expression #assign #end ;
Expression ->  Simple_expression_zegond
Expression ->  #padd ID B
B ->  = Expression #assign
B ->  [ Expression ] #parray H
B ->  Simple_expression_prime
H ->  = Expression #assign
H ->  G D C
Simple_expression_zegond ->  Additive_expression_zegond C
Simple_expression_prime ->  Additive_expression_prime C
C ->  #padd Relop Additive_expression #op
C ->  ε
Relop -> <
Relop -> ==
Additive_expression ->  Term D
Additive_expression_prime ->  Term_prime D
Additive_expression_zegond ->  Term_zegond D
D ->  #padd Addop Term #op D
D -> ε
Addop -> +
Addop -> -
Term ->  Factor G
Term_prime ->  Factor_prime G
Term_zegond ->  Factor_zegond G
G ->  #padd * Factor #op G
G ->  ε
Factor ->  ( Expression )
Factor ->  #padd ID Var_call_prime
Factor ->  #padd NUM
Var_call_prime ->  ( #arg_pass Args #arg_pass_finish #call_function )
Var_call_prime ->  Var_prime
Var_prime ->  [ Expression ] #parray
Var_prime ->  ε
Factor_prime ->  ( #arg_pass Args #arg_pass_finish #call_function )
Factor_prime ->  ε
Factor_zegond ->  ( Expression )
Factor_zegond ->  #padd NUM
Args ->  Arg_list
Args ->  ε
Arg_list -> #function_arg_counter Expression Arg_list_prime
Arg_list_prime ->  , #function_arg_counter Expression Arg_list_prime
Arg_list_prime ->  ε