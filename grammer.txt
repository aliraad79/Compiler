Program ->  Declaration_list $
Declaration_list ->  Declaration Declaration_list
Declaration_list ->  ε
Declaration ->  Declaration_initial Declaration_prime
Declaration_initial ->  Type_specifier #padd ID
Declaration_prime ->  Fun_Declaration_prime
Declaration_prime ->  #pdeclare Var_Declaration_prime
Var_Declaration_prime ->  #var ;
Var_Declaration_prime -> [ #padd NUM ] #make_var_array #declare_global_arr ;
Fun_Declaration_prime ->  ( #declare_function #pdeclare #new_scope Params ) #set_func_start Compound_stmt #return #end_scope #end_function
Type_specifier ->  #push_int int
Type_specifier ->  #push_void void
Params ->  int #push_int #padd #pdeclare ID Param_prime Param_list
Params ->  void
Param_list ->  , Param Param_list
Param_list -> ε
Param ->  Declaration_initial #pdeclare Param_prime
Param_prime ->  [ #array_param_added ]
Param_prime ->  #param_added ε
Compound_stmt ->  { Declaration_list Statement_list }
Statement_list ->  Statement Statement_list
Statement_list ->  ε
Statement ->  Expression_stmt
Statement ->  Compound_stmt
Statement ->  Selection_stmt
Statement ->  Iteration_stmt
Statement ->  Return_stmt
Expression_stmt ->  Expression #pop ;
Expression_stmt ->  break #break_jump ;
Expression_stmt ->  ;
Selection_stmt ->  if ( Expression ) #save Statement Else_stmt
Else_stmt ->  #jpf endif
Else_stmt ->  else #jpf_save Statement #jp endif
Iteration_stmt ->  #add_break_temp repeat #label Statement until ( Expression ) #until #set_break_temp
Return_stmt ->  return Return_stmt_prime
Return_stmt_prime ->  #return ;
Return_stmt_prime -> Expression #assign_to_func #return ;
Expression ->  Simple_expression_zegond
Expression ->  #padd #check_declare ID B
B ->  = Expression #assign
B ->  [ Expression ] #set_array_address H
B ->  Simple_expression_prime
H ->  = Expression #assign
H ->  G D C
Simple_expression_zegond ->  Additive_expression_zegond C
Simple_expression_prime ->  Additive_expression_prime C
C ->  #padd Relop Additive_expression #op
C ->  ε
Relop -> <
Relop -> ==
Additive_expression ->  Term D
Additive_expression_prime ->  Term_prime D
Additive_expression_zegond ->  Term_zegond D
D ->  #padd Addop Term #op D
D -> ε
Addop -> +
Addop -> -
Term ->  Factor G
Term_prime ->  Factor_prime G
Term_zegond ->  Factor_zegond G
G ->  #padd * Factor #op G
G ->  ε
Factor ->  ( Expression )
Factor ->  #padd #check_declare ID Var_call_prime
Factor ->  #padd NUM
Var_call_prime ->  #func_call_started ( Args ) #func_call_ended
Var_call_prime ->  Var_prime
Var_prime ->  [ Expression #set_array_address ]
Var_prime ->  ε
Factor_prime ->  #func_call_started ( Args ) #func_call_ended
Factor_prime ->  ε
Factor_zegond ->  ( Expression )
Factor_zegond ->  #padd NUM
Args ->  Arg_list
Args ->  ε
Arg_list -> #push_arg Expression #assign_arg Arg_list_prime
Arg_list_prime ->  , #push_arg Expression #assign_arg Arg_list_prime
Arg_list_prime ->  ε